name: Build and not push Container Image on Github registry
on:
  workflow_call:
    inputs:
      BUILD_ARGS:
        type: string
        description: 'Extra arguments to pass to kaniko'
        required: false
      IMAGE:
        type: string
        description: 'Image name to use'
        required: false
      TAG:
        type: string
        description: 'Tag to use'
        required: false
      CONTEXT:
        type: string
        description: 'Context to use'
        required: false
        default: "./"
      DOCKERFILE:
        type: string
        description: 'Dockerfile to use'
        required: false
        default: "Dockerfile"
      SECRETS_ENV:
        type: string
        description: Secrets environment
      SECRETS_FILE:
        type: string
        description: Secrets file
      TARGET:
        type: string
        description: "Sets the target stage to build"
        required: false

jobs:
  build_container_image:
    runs-on: 'k8s-ci'
    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set Tag Value
      id: set_tag_value
      run: |
            TAG=$(echo ${{ inputs.TAG }})
            if [ -z "${TAG}" ]; then
              TAG=$(grep -i "version" ${{ inputs.CONTEXT }}/${{ inputs.DOCKERFILE }} |head -n1|cut -d '=' -f2|cut -d '"' -f2)
            fi
            if [ -z "${TAG}" ]; then
              TAG=$(echo ${{ github.sha }})
            fi
            echo TAG=$TAG
            echo "TAG=$TAG" >> $GITHUB_OUTPUT
    - name: Set Image Name Value
      id: set_image_value
      run: |
            IMAGE=$(echo ${{ inputs.IMAGE }})
            if [ -z "$IMAGE" ]; then
              IMAGE=$(grep -i "name" ${{ inputs.CONTEXT }}/${{ inputs.DOCKERFILE }} |head -n1|cut -d '=' -f2|cut -d '"' -f2)
            fi
            if [ -z "$IMAGE" ]; then
              IMAGE=$(echo $GITHUB_REPOSITORY | cut -d '/' -f2)
            fi
            echo IMAGE=$IMAGE
            echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT
    - name: Set BUILD_ARGS Value
      id: set_BUILD_ARGS_value
      run: |
          build_args="$(echo ${{ inputs.BUILD_ARGS }}|awk '{print $1}')"
          for arg in $(echo ${{ inputs.BUILD_ARGS }}|awk '{for(i=2;i<=NF;i++)print $i}')
          do
            build_args="$build_args"'\n'"$arg"
          done
          echo "build_args: $build_args" 
          echo "BUILD_ARGS=${build_args}" >> $GITHUB_OUTPUT
    - name: Set Dockerfile path
      id: set_Dockerfile_path_value
      run: |
            dockerfile_path=${{ inputs.DOCKERFILE }}
            if [ "${dockerfile_path}" == "Dockerfile" ]
            then
              dockerfile_path="${{ inputs.CONTEXT }}/Dockerfile"
            fi
            echo DOCKERFILE_PATH=$dockerfile_path
            echo "DOCKERFILE_PATH=$dockerfile_path" >> $GITHUB_OUTPUT
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Container
      id: build-job
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.CONTEXT }}
        file: ${{ steps.set_Dockerfile_path_value.outputs.dockerfile_path }}
        push: false
        tags: ghcr.io/${{ github.repository }}/${{ steps.set_image_value.outputs.IMAGE }}:${{ steps.set_tag_value.outputs.TAG }}
        build-args: ${{ steps.set_BUILD_ARGS_value.outputs.BUILD_ARGS }}
        secrets: ${{ inputs.SECRETS_ENV }}
        secret-files: ${{ inputs.SECRETS_FILE }}
        target: ${{ inputs.TARGET }}
        pull: 'true'
